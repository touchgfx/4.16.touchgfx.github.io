(self.webpackChunktouchgfx_documentation=self.webpackChunktouchgfx_documentation||[]).push([[8782],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return p}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=c(n),p=i,m=h["".concat(l,".").concat(p)]||h[p]||u[p]||r;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},44035:function(e,t,n){"use strict";var a=n(67294),i=n(25026);t.Z=function(e){const t=e.noShadow||!1,n=e.width,r=e.height,o=(0,i.Z)(e.imageSource);return t?a.createElement("div",{class:"figure noshadow"},a.createElement("a",{href:o,target:"_blank"},a.createElement("img",{width:n,height:r,src:o})),a.createElement("p",null,e.children)):a.createElement("div",{class:"figure"},a.createElement("a",{href:o,target:"_blank"},a.createElement("img",{width:n,height:r,src:o})),a.createElement("p",null,e.children))}},88678:function(e,t,n){"use strict";var a=n(67294);class i extends a.Component{render(){const e=`highlight highlight-${this.props.type}`;return a.createElement("div",{class:e},a.createElement("div",{class:"highlight-heading"},a.createElement("h5",null,a.createElement("div",{class:"highlight-icon"},this.props.icon),this.props.header)),a.createElement("div",{class:"highlight-content"},this.props.children))}}t.Z=i},2083:function(e,t,n){"use strict";var a=n(67294);class i extends a.Component{render(){return a.createElement("code",null,this.props.children)}}t.Z=i},93054:function(e,t,n){"use strict";var a=n(67294),i=n(88678);const r=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.createElement("path",{"fill-rule":"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}));class o extends a.Component{render(){return a.createElement(i.Z,{color:"var(--highlight-color-note)",header:"Note",type:"note",icon:r},this.props.children)}}t.Z=o},35096:function(e,t,n){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!a(e)}n.d(t,{b:function(){return a},Z:function(){return i}})},25026:function(e,t,n){"use strict";n.d(t,{C:function(){return r},Z:function(){return o}});var a=n(11368),i=n(35096);function r(){const{siteConfig:{baseUrl:e="/",url:t}={}}=(0,a.Z)();return{withBaseUrl:(n,a)=>function(e,t,n,{forcePrependBaseUrl:a=!1,absolute:r=!1}={}){if(!n)return n;if(n.startsWith("#"))return n;if((0,i.b)(n))return n;if(a)return t+n;const o=n.startsWith(t)?n:t+n.replace(/^\//,"");return r?e+o:o}(t,e,n,a)}}function o(e,t={}){const{withBaseUrl:n}=r();return n(e,t)}},13081:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return g},contentTitle:function(){return f},metadata:function(){return v},toc:function(){return y},default:function(){return b}});var a=n(3905),i=n(44035),r=n(93054),o=n(2083),s=Object.defineProperty,l=Object.defineProperties,c=Object.getOwnPropertyDescriptors,d=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,h=Object.prototype.propertyIsEnumerable,p=(e,t,n)=>t in e?s(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,m=(e,t)=>{for(var n in t||(t={}))u.call(t,n)&&p(e,n,t[n]);if(d)for(var n of d(t))h.call(t,n)&&p(e,n,t[n]);return e};const g={id:"canvas-widgets",title:"Canvas Widgets"},f=void 0,v={unversionedId:"development/ui-development/touchgfx-engine-features/canvas-widgets",id:"development/ui-development/touchgfx-engine-features/canvas-widgets",isDocsHomePage:!1,title:"Canvas Widgets",description:"Canvas Widgets and the Canvas Widget Renderer are a powerful and versatile add-on to TouchGFX which provides nice smooth, anti-aliased drawing of geometric shapes using relatively little memory while maintaining high performance. However, rendering geometrical shapes must be seen as a quite expensive operation and can easily strain the microcontrollers resources if not used carefully.",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/development/ui-development/touchgfx-engine-features/canvas-widgets.mdx",sourceDirName:"development/ui-development/touchgfx-engine-features",slug:"/development/ui-development/touchgfx-engine-features/canvas-widgets",permalink:"/4.16/ja/docs/development/ui-development/touchgfx-engine-features/canvas-widgets",version:"current",frontMatter:{id:"canvas-widgets",title:"Canvas Widgets"},sidebar:"docs",previous:{title:"Custom Widgets",permalink:"/4.16/ja/docs/development/ui-development/touchgfx-engine-features/custom-widgets"},next:{title:"Dynamic Bitmaps",permalink:"/4.16/ja/docs/development/ui-development/touchgfx-engine-features/dynamic-bitmaps"}},y=[{value:"Using CanvasWidgets",id:"using-canvaswidgets",children:[]},{value:"Memory Allocation and Usage",id:"memory-allocation-and-usage",children:[{value:"Memory Allocation in TouchGFX Designer",id:"memory-allocation-in-touchgfx-designer",children:[]},{value:"Memory Allocation in User Code",id:"memory-allocation-in-user-code",children:[]}]},{value:"The CWR Coordinate System",id:"the-cwr-coordinate-system",children:[]},{value:"Custom Canvas Widgets",id:"custom-canvas-widgets",children:[]},{value:"Painters",id:"painters",children:[]}],w={toc:y};function b(e){var t,n=e,{components:s}=n,p=((e,t)=>{var n={};for(var a in e)u.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&d)for(var a of d(e))t.indexOf(a)<0&&h.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=m(m({},w),p),l(t,c({components:s,mdxType:"MDXLayout"}))),(0,a.kt)("p",null,"Canvas Widgets and the Canvas Widget Renderer are a powerful and versatile add-on to TouchGFX which provides nice smooth, anti-aliased drawing of geometric shapes using relatively little memory while maintaining high performance. However, rendering geometrical shapes must be seen as a quite expensive operation and can easily strain the microcontrollers resources if not used carefully."),(0,a.kt)("p",null,"The Canvas Widget Renderer (hereafter referred to as CWR) is a general graphics API, providing optimized drawing for primitives, automatically eliminating most superfluous drawings. CWR is used by TouchGFX for drawing complex geometric shapes. Geometric shapes are defined by Canvas Widgets. TouchGFX comes with a number of supported Canvas Widgets but just like normal widgets you can make your own custom Canvas Widget to match your needs. Where a Canvas Widget defines the geometric shape of a figure to be drawn by the CWR, the actual color of each pixel inside the figure is defined by an associated Painter class. Again, TouchGFX comes with a number of Painters but you can make your own custom Painters to match your needs."),(0,a.kt)("h2",m({},{id:"using-canvaswidgets"}),"Using CanvasWidgets"),(0,a.kt)("p",null,"Other widgets in TouchGFX have their sizes set automatically. A bitmap widget, for example, will automatically get the width and height of the contained bitmap. It is therefore enough to use ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"setXY()")," on the bitmap widget to place the bitmap on the display."),(0,a.kt)("p",null,"Canvas Widgets do not have a default size which can be determined automatically and set initially. Care must be taken to not only position, but also size the widget correctly, otherwise the width and height of the Canvas Widget will be zero, and nothing will be drawn on the display."),(0,a.kt)("p",null,"So, instead of using ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"setXY()"),", use ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"setPosition()")," to place and size the canvas widget. See also Custom Canvas Widgets below for an example on how to create and use a custom canvas widget."),(0,a.kt)("p",null,"Once the position and size of the Canvas Widget has been set, a geometrical shape can be drawn inside it. The coordinate system will have (0, 0) in the upper left corner of the widget (not the display), the X axis stretches to the right and the Y axis stretches downwards."),(0,a.kt)("p",null,"Canvas widgets are also supported in TouchGFX Designer, and makes the usage simple and has automatic memory allocation."),(0,a.kt)("p",null,"Available CanvasWidget based widgets in TouchGFXDesigner:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"../ui-components/shapes/line"}),"Line")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"../ui-components/shapes/circle"}),"Circle")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"../ui-components/shapes/shape"}),"Shape")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"../ui-components/progress-indicators/line-progress"}),"LineProgress")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",m({parentName:"li"},{href:"../ui-components/progress-indicators/circle-progress"}),"CircleProgress"))),(0,a.kt)("p",null,"Using these widgets via TouchGFX Designer, makes placement and size adjustment much easier by showing how the widget will look at run time."),(0,a.kt)("h2",m({},{id:"memory-allocation-and-usage"}),"Memory Allocation and Usage"),(0,a.kt)("p",null,"To produce nice anti-aliased complex geometrical shapes additional memory is required. For this CWR has to have a special allocated memory buffer that is used during rendering. CWR, as the rest of TouchGFX, has no dynamic memory allocation."),(0,a.kt)("h3",m({},{id:"memory-allocation-in-touchgfx-designer"}),"Memory Allocation in TouchGFX Designer"),(0,a.kt)("p",null,"When adding a widget to the canvas of a Screen, a memory buffer is automatically generated. The size of the buffer is based upon the width of the Screen with the following formula (Width ","\xd7"," 3) ","\xd7"," 5. This is however not always the ideal buffer size for all scenarios. Therefore the buffer size can be overridden has shown in the image below."),(0,a.kt)(i.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/canvas-widgets/screen-canvas-buffer-override.png",mdxType:"Figure"},"Canvas buffer size being overridden in Screen properties"),(0,a.kt)("h3",m({},{id:"memory-allocation-in-user-code"}),"Memory Allocation in User Code"),(0,a.kt)("p",null,"The memory buffer can be allocated and set up in ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"target/main.cpp")," and ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"simulator/main.cpp")," or be setup and allocated per Screen."),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-cpp"}),"static const uint16_t CANVAS_BUFFER_SIZE = 3600;\nstatic uint8_t canvasBuffer[CANVAS_BUFFER_SIZE]\n")),(0,a.kt)("p",null,"A static const defining the size of the memory buffer, and the actual memory buffer can be defined in the beginning of the ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"main.cpp")," or ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"ScreenView.hpp")),(0,a.kt)("p",null,"Then in either the ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"main()")," method of ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"main.cpp")," or ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"setupScreen()")," method of ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"ScreenView.cpp")," the following line setting up the buffer can be added."),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-cpp"}),"CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);\n")),(0,a.kt)("p",null,"The amount of CWR memory needed depends on the maximum size of the shapes that are to be drawn in the application. You can, however, reserve less memory than the maximum shape requires. To handle this situation, the CWR splits up the drawing of shapes into smaller frame buffer parts resulting in slightly longer rendering time, as shapes in these cases will sometimes have to be rendered more than once. It is possible to investigate the memory consumption closer and fine-tune it when running in simulator mode. Simply add the following function call to your main.cpp:"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-cpp"}),"CanvasWidgetRenderer::setWriteMemoryUsageReport(true);\n")),(0,a.kt)("p",null,"Now whenever a draw operation finishes, CWR will report (print in the console) how much memory was required. For canvas_widget_example this could be \u201cCWR requires 3604 bytes\u201d (for the first draw operation) followed by \u201cCWR requires 7932 bytes (4328 bytes missing)\u201d (for the second draw operation). Even though it appears that CWR does not have enough memory (4328 bytes missing in this case) the application runs fine. This is because CWR detects that too little memory is available to complete the complex draw operation in a single run. Instead, it splits the draw operation into two separate draw operations and the shape will be drawn just fine but will require more time to render."),(0,a.kt)("p",null,"Setting the correct memory buffer size is therefore a trade off between memory and performance (rendering time). A good starting value is usually around 3000, but using the above technique, a better value can often be determined. If the shape is too complex and the allocated memory buffer is too small, part of the shape will not be drawn (some vertical pixel lines will be skipped) and it is possible that nothing is drawn at all. In any case rendering time will increase a lot."),(0,a.kt)("p",null,"This means that if you want your application to render the CWR drawing at maximum speed you need to allocate the requested amount of memory. But if you can go with a slower rendering timer it is perfectly okay to reduce the memory buffer."),(0,a.kt)("h2",m({},{id:"the-cwr-coordinate-system"}),"The CWR Coordinate System"),(0,a.kt)("p",null,"The coordinate system in TouchGFX is normally used to address pixels for positioning bitmaps on the display. Bitmaps, texts and other graphic elements are all placed in a coordinate system, where (0,0) is the upper left hand pixel, the x-axis extends to the right and the y-axis extends downwards. In CWR it is not enough to be able to address pixels using integers, though this might be enough in special cases, this is far from enough in general. To demonstrate this, consider a circle with line width 1, which must fit precisely inside a box of 5 by 5 pixels. The center of this circle must be at (2.5, 2.5) and the radius must be 2, so fractions are required for the center coordinate. Similarly, if the circle should fit inside a box of 6 by 6 pixels, the center must be at (3, 3) and the radius must be 2.5, so here fractions are required for the radius."),(0,a.kt)("p",null,"This new way of addressing coordinates for drawing graphics, means that the center of the pixel at (0,0) has CWR coordinate (0.5, 0.5). Hence, the box containing the pixel in the upper left corner of the screen has the following outline: (0,0) -> (1,0) -> (1,1) -> (0,1) -> (0,0)."),(0,a.kt)(i.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/canvas-widgets/cwr-coordinate-system.png",mdxType:"Figure"},"CWR coordinate system for pixel at (0,0)"),(0,a.kt)("p",null,"Though this might seem confusing at first, it quickly becomes very natural. Where the coordinate system for bitmaps address the pixels, the same coordinate for Canvas Widgets address the gap just before and above the pixel."),(0,a.kt)("h2",m({},{id:"custom-canvas-widgets"}),"Custom Canvas Widgets"),(0,a.kt)("p",null,"Implementing a custom Canvas Widget requires an implementation of a new class with the following functions:"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-cpp"}),"virtual bool drawCanvasWidget(const Rect& invalidatedArea) const;\nvirtual Rect getMinimalRect() const;\n")),(0,a.kt)("p",null,"The ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"drawCanvasWidget()")," must draw whatever the custom widget needs to draw and ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"getMinimalRect()")," should return the actual rectangle in the Widget which contains the geometrical shape."),(0,a.kt)(r.Z,{mdxType:"Note"},"The reason for having ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"getMinimalRect()")," is that a geometrical shape can be moved around inside its widget and it is often impractical to resize and reposition the widget whenever the shape changes to only invalidate the smallest possible area.",(0,a.kt)("p",null,"  A dummy implementation of ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"getMinimalRect()")," could simply  ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"return rect;"),", that is the size of the widget, but that would cause the entire area covered by the canvas widget to be redrawn, and not just the part of the canvas widget containing the geometrical shape. Very often, the geometrical shape occupies only a small part of the canvas widget.")),(0,a.kt)("p",null,"Canvas Widgets all use the Canvas class, which encapsulates the Canvas Widget Renderer as described above. CWR has many optimizations applied automatically, though awareness of your geometrical shape in relation to the invalidated area, and avoiding unnecessary drawing outside the invalidated area, is always a good way to boost performance."),(0,a.kt)("p",null,"A rough implementation of a diamond shaped square inside a 10x10 box could look something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-cpp"}),"class Diamond10x10 : public CanvasWidget\n{\npublic:\n  virtual Rect getMinimalRect() const\n  {\n    return Rect(0,0,10,10);\n  }\n  virtual bool drawCanvasWidget(const Rect& invalidatedArea) const\n  {\n    Canvas canvas(this, invalidatedArea);\n    canvas.moveTo(5,0);\n    canvas.lineTo(10,5);\n    canvas.lineTo(5,10);\n    canvas.lineTo(0,5);\n    return canvas.render(); // Shape is automatically closed\n  }\n};\n")),(0,a.kt)(r.Z,{mdxType:"Note"},"Again, be careful that ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"getMinimalRect()")," returns to correct rectangle, or the graphics on screen might be wrong."),(0,a.kt)("p",null,"In order to see the Diamond10x10 on the display, the color must be set using ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"Diamond10x10::setPainter()")," inherited from CanvasWidget. Also, the Diamond10x10 must be placed and sized correctly. This could look similar to this:"),(0,a.kt)("p",null,"In the header file declare"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-cpp"}),"Diamond10x10 box;\nPainterRGB565 myPainter;\n")),(0,a.kt)("p",null,"and in the code you should have something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-cpp"}),"myPainter.setColor(Color::getColorFrom24BitRGB(0xFF, 0x0, 0x0));\nbox.setPosition(100,100,10,10);\nbox.setPainter(myPainter);\nadd(box);\n")),(0,a.kt)("h2",m({},{id:"painters"}),"Painters"),(0,a.kt)("p",null,"A Painter defines a coloring scheme to fill a Canvas Widget object. TouchGFX comes with a set of predefined painter classes, but custom painters can easily be implemented."),(0,a.kt)("p",null,"In order to implement a custom Painter, care must be taken to never write outside the frame buffer. Such a bug in a custom Painter can result in serious crashes. Here is an example of a custom Painter which we will use to paint an object red, only function ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"renderNext()")," needs to be implemented. See AbstractPainter for more information."),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-cpp"}),"class Red : public AbstractPainterRGB565\n{\npublic:\n    virtual bool renderNext(uint8_t &red, uint8_t &green, uint8_t &blue, uint8_t &alpha)\n    {\n        red = 0xFF;\n        green = 0x00;\n        blue = 0x00;\n        alpha = 0xFF;\n    }\n};\n")),(0,a.kt)("p",null,"To paint the box object from above red, put this in the header file:"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-cpp"}),"Diamond10x10 box;\nRed redPaint;\n")),(0,a.kt)("p",null,"and put this in the code:"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-cpp"}),"box.setPosition(100,100,10,10);\nbox.setPainter(redPaint);\nadd(box);\n")),(0,a.kt)("p",null,"Please note that it is possible to override more methods to create special painters e.g. ",(0,a.kt)(o.Z,{mdxType:"InlineCode"},"renderInit()"),", however, TouchGFX has some generic painters which covers most uses."))}b.isMDXComponent=!0}}]);